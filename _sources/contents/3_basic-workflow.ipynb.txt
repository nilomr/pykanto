{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basic workflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [],
   "source": [
    "from pykanto.utils.paths import pykanto_data, ProjDirs\n",
    "from pykanto.dataset import SongDataset\n",
    "from pykanto.parameters import Parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are going to load one of the very small sample datasets that are packaged with `pykanto`—this will be enough for a first test to familiarise yourself with the package. See [working with paths and directories](../contents/2_paths-and-dirs.md) to learn how to load your own data.\n",
    "\n",
    "These are a few songs from two male great tits (_Parus major_) in [my study population](http://wythamtits.com/) in Wytham Woods, Oxfordshire, UK."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Items held:\n",
      "\n",
      "PROJECT: /home/nilomr/projects/pykanto/pykanto\n",
      "DATA: /home/nilomr/projects/pykanto/pykanto/data\n",
      "RAW_DATA: /home/nilomr/projects/pykanto/pykanto/data/segmented/great_tit\n",
      "SEGMENTED: /home/nilomr/projects/pykanto/pykanto/data/segmented/great_tit\n",
      "RESOURCES: /home/nilomr/projects/pykanto/pykanto/resources\n",
      "REPORTS: /home/nilomr/projects/pykanto/pykanto/reports\n",
      "FIGURES: /home/nilomr/projects/pykanto/pykanto/reports/figures\n"
     ]
    }
   ],
   "source": [
    "DATASET_ID = \"GREAT_TIT\"\n",
    "DIRS = pykanto_data(dataset=DATASET_ID)\n",
    "print(DIRS)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can create a SongDataset object, which is the main class in `pykanto` and acts as a sort of database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileExistsError",
     "evalue": "GREAT_TIT already exists. You can overwrite it by setting `overwrite_dataset=True`",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileExistsError\u001b[0m                           Traceback (most recent call last)",
      "\u001b[1;32m/home/nilomr/projects/pykanto/docs/contents/3_basic-workflow.ipynb Cell 6'\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/home/nilomr/projects/pykanto/docs/contents/3_basic-workflow.ipynb#ch0000005?line=0'>1</a>\u001b[0m params \u001b[39m=\u001b[39m Parameters() \u001b[39m# Using default parameters, which you should't\u001b[39;00m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/home/nilomr/projects/pykanto/docs/contents/3_basic-workflow.ipynb#ch0000005?line=1'>2</a>\u001b[0m dataset \u001b[39m=\u001b[39m SongDataset(DATASET_ID, DIRS, parameters\u001b[39m=\u001b[39;49mparams)\n\u001b[1;32m      <a href='vscode-notebook-cell:/home/nilomr/projects/pykanto/docs/contents/3_basic-workflow.ipynb#ch0000005?line=2'>3</a>\u001b[0m dataset\u001b[39m.\u001b[39mvocs\u001b[39m.\u001b[39mhead()\n",
      "File \u001b[0;32m~/projects/pykanto/pykanto/dataset.py:117\u001b[0m, in \u001b[0;36mSongDataset.__init__\u001b[0;34m(self, DATASET_ID, DIRS, parameters, random_subset, overwrite_dataset, overwrite_data)\u001b[0m\n\u001b[1;32m    <a href='file:///home/nilomr/projects/pykanto/pykanto/dataset.py?line=114'>115</a>\u001b[0m \u001b[39m# Throw error if dataset already exists\u001b[39;00m\n\u001b[1;32m    <a href='file:///home/nilomr/projects/pykanto/pykanto/dataset.py?line=115'>116</a>\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mDIRS\u001b[39m.\u001b[39mDATASET\u001b[39m.\u001b[39mis_file() \u001b[39mand\u001b[39;00m overwrite_dataset \u001b[39mis\u001b[39;00m \u001b[39mFalse\u001b[39;00m:\n\u001b[0;32m--> <a href='file:///home/nilomr/projects/pykanto/pykanto/dataset.py?line=116'>117</a>\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mFileExistsError\u001b[39;00m(\n\u001b[1;32m    <a href='file:///home/nilomr/projects/pykanto/pykanto/dataset.py?line=117'>118</a>\u001b[0m         \u001b[39mf\u001b[39m\u001b[39m'\u001b[39m\u001b[39m{\u001b[39;00mDATASET_ID\u001b[39m}\u001b[39;00m\u001b[39m already exists. You can overwrite \u001b[39m\u001b[39m'\u001b[39m\n\u001b[1;32m    <a href='file:///home/nilomr/projects/pykanto/pykanto/dataset.py?line=118'>119</a>\u001b[0m         \u001b[39m'\u001b[39m\u001b[39mit by setting `overwrite_dataset=True`\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    <a href='file:///home/nilomr/projects/pykanto/pykanto/dataset.py?line=120'>121</a>\u001b[0m \u001b[39m# Build dataset\u001b[39;00m\n\u001b[1;32m    <a href='file:///home/nilomr/projects/pykanto/pykanto/dataset.py?line=121'>122</a>\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_get_wav_json_filedirs(random_subset\u001b[39m=\u001b[39mrandom_subset)\n",
      "\u001b[0;31mFileExistsError\u001b[0m: GREAT_TIT already exists. You can overwrite it by setting `overwrite_dataset=True`"
     ]
    }
   ],
   "source": [
    "\n",
    "params = Parameters() # Using default parameters, which you should't\n",
    "dataset = SongDataset(DATASET_ID, DIRS, parameters=params)\n",
    "dataset.vocs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now have an object `dataset`, which is an instance of the `SongDataset` class and has all of its methods. For example, you might want to segment "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chunkinfo(n_workers=8, len_iterable=20, n_chunks=10, chunksize=2, last_chunk=2)\n",
      "Found 20 vocalisations. They will be processed in 10 chunks of length 2.\n",
      "Finding units in vocalisations: 100%|██████████| 10/10 [00:01<00:00,  6.27it/s]\n",
      "Found and segmented 167 units.\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 616.32x322.56 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset.segment_into_units()\n",
    "for voc in dataset.vocs.index[:1]:\n",
    "    dataset.plot_voc_seg(voc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for song_level in [True, False]:\n",
    "#     dataset.parameters.update(song_level=song_level)\n",
    "#     dataset.get_units()\n",
    "\n",
    "# dataset.reload()\n",
    "# for song_level in [True, False]:\n",
    "#     dataset.parameters.update(song_level=song_level)\n",
    "#     dataset.cluster_ids(min_sample=5)\n",
    "\n",
    "# for song_level in [True, False]:\n",
    "#     dataset.parameters.update(song_level=song_level)\n",
    "#     dataset.prepare_interactive_data()\n",
    "\n",
    "# dataset.parameters.update(song_level=True)\n",
    "# dataset.open_label_app()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If need to load an existing dataset:\n",
    "(This needs you to create a ProjDirs object)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# out_dir = DIRS.DATA / \"datasets\" / DATASET_ID / f\"{DATASET_ID}.db\"\n",
    "# dataset = pickle.load(open(out_dir, \"rb\"))"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "9b97ee16365f5d5f76540b5681d8285b31428be7335efa9f541b550d84bc67ff"
  },
  "kernelspec": {
   "display_name": "Python 3.8.0 ('pykanto-test')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
